use Mix.Config

config :sign_dict, :environment, :prod

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :sign_dict, SignDictWeb.Endpoint,
  http: [port: {:system, "PHX_PORT"}],
  url: [host: "signdict.org", port: 80],
  cache_static_manifest: "priv/static/cache_manifest.json",
  root: ".",
  server: true,
  version: Mix.Project.config()[:version]

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :sign_dict, SignDictWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :sign_dict, SignDictWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :sign_dict, SignDictWeb.Endpoint, server: true
#

config :sign_dict, SignDictWeb.Endpoint, secret_key_base: System.get_env("SECRET_KEY_BASE")

config :sign_dict, :upload_path, "/var/signdict/uploads"

config :sign_dict, SignDict.Repo,
  username: System.get_env("DB_USERNAME"),
  password: System.get_env("DB_PASSWORD"),
  database: System.get_env("DB_DATABASE"),
  hostname: System.get_env("DB_HOSTNAME"),
  pool_size: 20

config :phoenix, :serve_endpoints, true

config :bugsnag,
  release_stage: "production",
  use_logger: true,
  api_key: System.get_env("BUGSNAG_API_KEY")

config :sign_dict, :newsletter, subscriber: ExChimp.List
config :ex_chimp, api_key: System.get_env("MAILCHIMP_API_KEY")

config :sign_dict, SignDictWeb.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: "smtp.mailbox.org",
  port: 465,
  username: "mail@signdict.org",
  password: System.get_env("SMTP_PASSWORD"),
  tls: :if_available,
  ssl: true,
  retries: 1

config :sign_dict, :jw_player,
  api_key: System.get_env("JW_PLAYER_API_KEY"),
  api_secret: System.get_env("JW_PLAYER_API_SECRET")

config :sign_dict, :wps_importer,
  url: System.get_env("WPS_IMPORT_ROOM"),
  domain: System.get_env("WPS_IMPORT_DOMAIN")

config :sign_dict, :wps_sign_importer, url: System.get_env("WPS_SIGN_IMPORT_ROOM")

config :recaptcha,
  public_key: {:system, "RECAPTCHA_PUBLIC_KEY"},
  secret: {:system, "RECAPTCHA_PRIVATE_KEY"}

config :ua_inspector,
  database_path: System.get_env("UA_INSPECTOR_PATH")

config :sign_dict, :sign2mint_domain, System.get_env("SIGN2MINT_DOMAIN")
